<?xml version="1.0" encoding="utf-8"?>
<configuration debug="true" scan="true" scanPeriod="2">
    <!-- conf consoel out -->
    <appender name ="console_out" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        < encoder> : 对日志进行格式化。
        <target> : 字符串System.out 或者 System.err, 默认 System.out
        -->
        <encoder target="SYSTEM_OUT">>
            <pattern>%date [%thread] %-5level %logger - %message%newline</pattern>
        </encoder>

        <!--LevelFilter 根据记录级别对记录事件进行过滤。如果事件的级别等于配置的级别，过滤 器会根据 onMatch 和 onMismatch 属性接受或拒绝事件-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤掉非INFO级别 -->
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--临界值过滤器（ThresholdFilter） ThresholdFilter过滤掉低于指定临界值的事件。-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 过滤掉TRACE和DEBUG级别的日志 -->
            <level>INFO</level>
        </filter>
        <!--求值过滤器（EvaluatorFilter） 评估是否符合指定的条件-->
        <filter class="ch.qos.logback.classic.filter.EvaluatorFilter">
            <evaluator>
                <!--过滤掉所有日志中不包含hello字符的日志-->
                <expression>
                    message.contains("hello")
                </expression>
                <onMatch>NEUTRAL</onMatch>
                <onMismatch>DENY</onMismatch>
            </evaluator>
        </filter>
        <filter class="ch.qos.logback.classic.filter.EvaluatorFilter">
            <evaluator>
                <matcher>
                    <Name>odd</Name>
                    <!-- 过滤掉序号为奇数的语句-->
                    <regex>statement [13579]</regex>
                </matcher>
                <expression>odd.matches(formattedMessage)</expression>
                <onMatch>NEUTRAL</onMatch>
                <onMismatch>DENY</onMismatch>
            </evaluator>
        </filter>

    </appender>

    <!-- conf file out -->
    <appender name="file_out" class="ch.qos.logback.core.FileAppender">
        <!--<file>：被写入的文件名,可以是相对目录 , 也可以是绝对目录 , 如果目录不存在则会自动创建。-->
        <file>logs/debug.log</file>
        <!--<append>：如果是true , 日志被追加到文件结尾 , 如果是false,清空现存文件 , 默认是true。-->
        <append>
            true
        </append>
        <encoder>
            <pattern>%date [%thread] %-5level %logger - %message%newline</pattern>
        </encoder>
    </appender>

    <!-- 滚动纪录文件，先将日志记录到指定文件，当符合某种条件时，将日志记录到其他文件 -->
    <!-- conf file out -->
    <appender name="infoAppender" class="ch.qos.logback.core.RollingFileAppender">
        <file>logs/error.log</file>
        <!-- 设置滚动策略 -->
        <!--<fileNamePattern>：必要节点，包含文件及“%d” 转换符，“%d”可以包含一个java.text.SimpleDateFormat 制定的时间格式，如：%d{yyyy-MM},如果直接使用%d ，默认格式是 yyyy－MM－dd。-->
        <!--<maxHistory>：可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件，假设设置每个月滚动，且 是 6，则只保存最近6个月的文件，删除之前的旧文件，注意：删除旧文件是哪些为了归档而创建的目录也会被删除。-->
        <!--<filenamePattern>：必须包含“%i” 例如：设置最小值，和最大值分别为1和2，命名模式为 log%i.log,会产生归档文件log1.log和log2.log，还可以指定文件压缩选项，例如：log％i.log.gz 或者 log%i.log.zip-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--设置日志命名模式-->
            <fileNamePattern>errorFile.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--最多保留30天log-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 超过150MB时，触发滚动策略 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>150</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>%d [%p] %-5level %logger - %msg%newline</pattern>
        </encoder>
    </appender>

    <!--logger是的子节点，来设置某一个包或者具体的某一个类的日志打印级别，以及指定。logger仅有一个name属性，两个可选属性 level／addtivity。-->
    <!--name：用来指定受此loger约束的某一个包或者具体的某一个类。-->
    <!--level：用来设置打印级别，大小写无关。可选值有TRACE、DEBUG、INFO、WARN、ERROR、ALL和OFF。还有一个特俗值INHERITED 或者 同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。-->
    <!--addtivity：是否向上级logger传递打印信息，默认为true；-->
    <logger name="logback.olf.log" level="info">
        <appender-ref ref = "console_out"/>
        <appender-ref ref = "infoAppender"/>
    </logger>

    <!--元素配置根logger。该元素有一个level属性，没有name属性，因为已经被命名 为root。
    Level属性的值大小写无关，其值为下面其中一个字符串：TRACE、DEBUG、INFO、 WARN、ERROR、ALL 和 OFF。如果 root 元素没 有引用任何 appender，就会失去所有 appender。-->
    <root level="ALL">
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="errorAppender"/>
    </root>

</configuration>
